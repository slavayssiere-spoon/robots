syntax = "proto3";

package robots;

option go_package = "github.com/slavayssiere-spoon/robots";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "groups.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "Spoon - Robots WS";
		version: "0.0.1";
		contact: {
			name: "Spoon Cloud Team";
			url: "https://gitlab.com/SpoonQIR/Cloud/services/robots";
			email: "sebastien.lavayssiere@spoon.ai";
		};
	};
	// Overwriting host entry breaks tests, so this is not done here.
	external_docs: {
		url: "https://gitlab.com/SpoonQIR/Cloud/services/robots";
		description: "link for docs";
	}
	schemes: HTTPS;
	schemes: HTTP;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
			}
		}
	}
	security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "418";
		value: {
			description: "I'm a teapot.";
			schema: {
				json_schema: {
					ref: ".grpc.gateway.examples.internal.proto.examplepb.NumericEnum";
				}
			}
		}
	}
};

message Robot {
	// @inject_tag: gorm:"-"
	uint64 id = 1;
	// @inject_tag: gorm:"unique;not null; index:email"
	string email = 2;
	string gps = 3;
	string address = 4;
	string mac = 5;
	// @inject_tag: gorm:"-"
	repeated groups.Group groups = 6;
	// @inject_tag: gorm:"-"
	repeated string paths = 7;
	string name = 8;
	string key = 9;
	string directusUser = 10;
	string directusPassword = 11;
	string pubsubTopic = 12;
}

message Robots {
	repeated Robot list = 1;
	uint64 limit = 2;
	uint64 offset = 3;
	uint64 max = 4;
}

message SaFile {
	string content = 1;
}

message RobotMessage {
	uint64 id = 1;
	string message = 2;
	bool send = 3;
	string email = 4;
}

message DirectusToken {
	// @inject_tag: json:"access_token"
	string access_token = 1;
	// @inject_tag: json:"expires"
	int64 expires = 2;
	// @inject_tag: json:"refresh_token"
	string refresh_token = 3;
}

service robots {
	rpc GetAll (Robots) returns (Robots) {
		option (google.api.http) = {
			get: "/v1/robots"
		};
	}

	rpc GetGraph (google.protobuf.Empty) returns (groups.Groups) {
		option (google.api.http) = {
			get: "/v1/robots/graph"
		};
	}

	rpc Get (Robot) returns (Robot) {
		option (google.api.http) = {
			get: "/v1/robots/id/{id}"
		};
	}

	rpc GetDirectusToken (Robot) returns (DirectusToken) {
		option (google.api.http) = {
			get: "/v1/robots/directustoken/{id}"
		};
	}

	rpc GetMyDirectusToken (google.protobuf.Empty) returns (DirectusToken) {
		option (google.api.http) = {
			get: "/v1/robots/directustoken"
		};
	}

	rpc GetByGroup (groups.Group) returns (Robots) {
		option (google.api.http) = {
			get: "/v1/robots/group/{id}"
		};
	}

	rpc GetSAFile (Robot) returns (SaFile) {
		option (google.api.http) = {
			post: "/v1/robots/id/{id}/sa-file"
		};
	}

	rpc Add (Robot) returns (Robot) {
		option (google.api.http) = {
			post: "/v1/robots"
			body: "*"
		};
	}

	rpc SendToRobot (RobotMessage) returns (RobotMessage) {
		option (google.api.http) = {
			post: "/v1/robots/message/{id}"
			body: "*"
		};
	}

	rpc SendToRobotWithEmail (RobotMessage) returns (RobotMessage) {
		option (google.api.http) = {
			post: "/v1/robots/message/email/{email}"
			body: "*"
		};
	}

	rpc Update (Robot) returns (Robot) {
		option (google.api.http) = {
			patch: "/v1/robots"
			body: "*"
		};
	}

	rpc UpdateMacAddress(Robot) returns (Robot) {
		option (google.api.http) = {
			put: "/v1/robots/id/{id}/mac/{mac}"
		};
	}
}
